import telebot
import random
import time
import os
from dotenv import load_dotenv
from dictionary_kana_kanji import romaji_katakana, romaji_hiragana, noryoku, noryoku_translate


load_dotenv()


TOKEN = os.getenv('TOKEN')

if not TOKEN:
    raise ValueError("Bot token is not defined. Check your .env file.")

bot = telebot.TeleBot(TOKEN)


user_states = {}
user_data = {}
cooldown_time = 3 # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö



@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = {'katakana': {'questions': list(romaji_katakana.keys()), 'current': None},
                                  'hiragana': {'questions': list(romaji_hiragana.keys()), 'current': None},
                                  'kanji': {'questions': list(noryoku.keys()),'current': None},
                                  'kanji_translate':{'questions': list(noryoku_translate.keys()), 'current': None},
                                  'stats': {'correct': 0, 'total': 0}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞
                                }
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(telebot.types.KeyboardButton('–•–∏—Ä–∞–≥–∞–Ω–∞'))
    keyboard.add(telebot.types.KeyboardButton('–ö–∞—Ç–∞–∫–∞–Ω–∞'))
    keyboard.add(telebot.types.KeyboardButton('–ö–∞–Ω–¥–∑–∏ N5-N4'))

    welcome_message = (
        "üëã „Åì„Çì„Å´„Å°„ÅØ! \n\n"
        "–ü–æ–∑–≤–æ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è. –Ø - –±–æ—Ç-—Å–µ–Ω—Å–µ–π, –∏ —è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –∫–∞–Ω—ã –∏ –∫–∞–Ω–¥–∑–∏.\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ —Ç–∞–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã, –Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ –≤—Å–∫–æ—Ä–µ –±—É–¥—É —Å–∞–º—ã–º –∫—Ä—É—Ç—ã–º –±–æ—Ç–æ–º! "
        "–ü–æ—ç—Ç–æ–º—É –æ–Ω–∏ –≤–µ–ª–µ–ª–∏ –º–Ω–µ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞—Ç—å, —á—Ç–æ–±—ã —Ç—ã –ø—Ä–æ—è–≤–∏–ª —Ç–µ—Ä–ø–µ–Ω–∏–µ!‚òùÔ∏è\n\n"
        "–¢–∞–∫-—Å, —á—Ç–æ-—Ç–æ —è –∑–∞–±–æ–ª—Ç–∞–ª—Å—è... –î–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º!\n\n"
        "üìù –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: —Ö–∏—Ä–∞–≥–∞–Ω—É, –∫–∞—Ç–∞–∫–∞–Ω—É –∏–ª–∏ –∫–∞–Ω–¥–∑–∏.\n\n"
        "üë∑‚Äç‚ôÇÔ∏èüë∑‚Äç‚ôÄÔ∏è –ö—Å—Ç–∞—Ç–∏! –ï—Å–ª–∏ —Ç—ã –∑–∞–º–µ—Ç–∏–ª –∫–∞–∫—É—é-—Ç–æ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å –∏–ª–∏ —è –Ω–∞—á–∞–ª —Ö–∞–Ω–¥—Ä–∏—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∂–µ–ª–∞–µ—à—å –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å - "
        "—Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–∏–º —Å–æ–∑–¥–∞—Ç–µ–ª—è–º (–æ–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω —É –º–µ–Ω—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏) –∏ –æ–Ω–∏ —Å—Ä–µ–∞–≥–∏—Ä—É—é—Ç."
    )
    bot.send_message(message.chat.id, welcome_message, reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def check(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    current_time = time.time()
    last_action_time = user_states.get(message.chat.id, {}).get('last_action_time', 0)

    if current_time - last_action_time < cooldown_time:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    user_states[message.chat.id] = {'last_action_time': current_time}


    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        main_menu(message)
        return


    if message.text == '–•–∏—Ä–∞–≥–∞–Ω–∞':
        check_hiragana(message)
    elif message.text == '–ö–∞—Ç–∞–∫–∞–Ω–∞':
        check_katakana(message)
    elif message.text == '–ö–∞–Ω–¥–∑–∏ N5-N4':
        check_kanji(message)
    elif message.text == '–ù–∞–∑–∞–¥':
        back_to_start(message)
    elif (message.text in romaji_katakana.values() or
          message.text in romaji_hiragana.values() or
          message.text in noryoku.values() or
          message.text in noryoku_translate.values()): 
        check_answer(message)
    else:
        bot.send_message(message.chat.id, '–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª. ')


def back_to_start(message):
    # –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    user_data[message.chat.id]['katakana']['current'] = None
    user_data[message.chat.id]['hiragana']['current'] = None
    user_data[message.chat.id]['kanji']['current'] = None
    user_data[message.chat.id]['kanji_check'] = None  # –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –º–µ–∂–¥—É —á—Ç–µ–Ω–∏–µ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º 

    # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_data[message.chat.id]['stats'] = {'correct': 0, 'total': 0}

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(telebot.types.KeyboardButton('–•–∏—Ä–∞–≥–∞–Ω–∞'))
    keyboard.add(telebot.types.KeyboardButton('–ö–∞—Ç–∞–∫–∞–Ω–∞'))
    keyboard.add(telebot.types.KeyboardButton('–ö–∞–Ω–¥–∑–∏ N5-N4'))
    bot.send_message(message.chat.id, '–ß—Ç–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å?', reply_markup=keyboard)


def check_answer(message):
    correct_symbol = None
    correct_reading = None
    correct_meaning = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–Ω–¥–∑–∏


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–∞—Ç–∞–∫–∞–Ω—ã, —Ö–∏—Ä–∞–≥–∞–Ω—ã –∏ –∫–∞–Ω–¥–∑–∏
    if user_data[message.chat.id]['katakana']['current']:
        correct_symbol = user_data[message.chat.id]['katakana']['current']
        correct_reading = romaji_katakana[correct_symbol]
    elif user_data[message.chat.id]['hiragana']['current']:
        correct_symbol = user_data[message.chat.id]['hiragana']['current']
        correct_reading = romaji_hiragana[correct_symbol]
    elif user_data[message.chat.id]['kanji']['current']:
        correct_symbol = user_data[message.chat.id]['kanji']['current']
        if user_data[message.chat.id]['kanji_check'] == 'reading':
            correct_reading = noryoku[correct_symbol]
        elif user_data[message.chat.id]['kanji_check'] == 'meaning':
            correct_meaning = noryoku_translate[correct_symbol]


    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ø—ã—Ç–æ–∫
    user_data[message.chat.id]['stats']['total'] += 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if correct_reading and message.text.strip().lower() == correct_reading.strip().lower():
        user_data[message.chat.id]['stats']['correct'] += 1  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ!')
    elif correct_meaning and message.text.strip().lower() == correct_meaning.strip().lower():
        user_data[message.chat.id]['stats']['correct'] += 1  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ!')
    else:
        if correct_reading:
            bot.send_message(message.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_reading}')
        elif correct_meaning:
            bot.send_message(message.chat.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_meaning}')


    # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    stats = user_data[message.chat.id]['stats']
    bot.send_message(
        message.chat.id,
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['correct']} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ {stats['total']}."
    )


    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if user_data[message.chat.id]['katakana']['current']:
        check_katakana(message)
    elif user_data[message.chat.id]['hiragana']['current']:
        check_hiragana(message)
    elif user_data[message.chat.id]['kanji']['current']:
        if user_data[message.chat.id]['kanji_check'] == 'reading':
            check_kanji_reading(message)
        elif user_data[message.chat.id]['kanji_check'] == 'meaning':
            check_kanji_meaning(message)


def check_katakana(message):
    questions = user_data[message.chat.id]['katakana']['questions']
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

    if not questions:
        keyboard.add(telebot.types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —Å–ª–æ–≥–∏ –∫–∞—Ç–∞–∫–∞–Ω—ã!', reply_markup=keyboard)
        back_to_start(message)
        return

    current_question = random.choice(questions)
    user_data[message.chat.id]['katakana']['current'] = current_question
    user_data[message.chat.id]['katakana']['questions'].remove(current_question)
    options = [current_question]
    for _ in range(3):
        option = random.choice(list(romaji_katakana.keys()))
        while option in options:
            option = random.choice(list(romaji_katakana.keys()))
        options.append(option)
    random.shuffle(options)
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        romaji_option = romaji_katakana[option]
        keyboard.add(telebot.types.KeyboardButton(romaji_option))
    keyboard.add(telebot.types.KeyboardButton('–ù–∞–∑–∞–¥'))
    bot.send_message(message.chat.id, f"{current_question} ‚Äì –∫–∞–∫–æ–π —ç—Ç–æ —Å–ª–æ–≥?", reply_markup=keyboard)


def check_hiragana(message):
    questions = user_data[message.chat.id]['hiragana']['questions']
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

    if not questions:
        keyboard.add(telebot.types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —Å–ª–æ–≥–∏ —Ö–∏—Ä–∞–≥–∞–Ω—ã!', reply_markup=keyboard)
        back_to_start(message)
        return

    current_question = random.choice(questions)
    user_data[message.chat.id]['hiragana']['current'] = current_question
    user_data[message.chat.id]['hiragana']['questions'].remove(current_question)
    options = [current_question]
    for _ in range(3):
        option = random.choice(list(romaji_hiragana.keys()))
        while option in options:
            option = random.choice(list(romaji_hiragana.keys()))
        options.append(option)
    random.shuffle(options)
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        romaji_option = romaji_hiragana[option]
        keyboard.add(telebot.types.KeyboardButton(romaji_option))

    keyboard.add(telebot.types.KeyboardButton('–ù–∞–∑–∞–¥'))
    bot.send_message(message.chat.id, f"{current_question} ‚Äì –∫–∞–∫–æ–π —ç—Ç–æ —Å–ª–æ–≥?", reply_markup=keyboard)


def check_kanji(message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è
    kanji_menu(message)


def kanji_menu(message):
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    reading_button = telebot.types.KeyboardButton('–ß—Ç–µ–Ω–∏–µ')
    meaning_button = telebot.types.KeyboardButton('–ó–Ω–∞—á–µ–Ω–∏–µ')
    markup.add(reading_button, meaning_button)

    bot.send_message(message.chat.id, "–ß—Ç–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å: —á—Ç–µ–Ω–∏–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ?", reply_markup=markup)
    bot.register_next_step_handler(message, kanji_check_selection)


def kanji_check_selection(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤—ã–±–æ—Ä
    if message.text == '–ß—Ç–µ–Ω–∏–µ':
        user_data[message.chat.id]['kanji_check'] = 'reading'
        bot.send_message(message.chat.id, '–¢—ã –≤—ã–±—Ä–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–µ–Ω–∏–π –∫–∞–Ω–¥–∑–∏.')
        check_kanji_reading(message)  # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–µ–Ω–∏–π –∫–∞–Ω–¥–∑–∏
    elif message.text == '–ó–Ω–∞—á–µ–Ω–∏–µ':
        user_data[message.chat.id]['kanji_check'] = 'meaning'
        bot.send_message(message.chat.id, '–¢—ã –≤—ã–±—Ä–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–Ω–¥–∑–∏.')
        check_kanji_meaning(message)  # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–Ω–¥–∑–∏
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —á—Ç–µ–Ω–∏–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ.')
        kanji_menu(message)


def check_kanji_reading(message):
    questions = user_data[message.chat.id]['kanji']['questions']
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if not questions:
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(telebot.types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –∫–∞–Ω–¥–∑–∏!', reply_markup=keyboard)
        back_to_start(message)
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ user_data
    current_question = random.choice(questions)
    user_data[message.chat.id]['kanji']['current'] = current_question
    user_data[message.chat.id]['kanji']['questions'].remove(current_question)

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
    options = [current_question]
    for _ in range(3):
        option = random.choice(list(noryoku.keys()))
        while option in options:
            option = random.choice(list(noryoku.keys()))
        options.append(option)
    random.shuffle(options)

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        kanji_option = noryoku[option]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –∫–∞–Ω–¥–∑–∏ –≤ —á—Ç–µ–Ω–∏—è (–∫—É–Ω—ä—ë–º–∏ –∏ –æ–Ω—ä—ë–º–∏)
        keyboard.add(telebot.types.KeyboardButton(kanji_option))

    keyboard.add(telebot.types.KeyboardButton('–ù–∞–∑–∞–¥'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, f"{current_question} ‚Äì –∫–∞–∫ —á–∏—Ç–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –∫–∞–Ω–¥–∑–∏?", reply_markup=keyboard)



def check_kanji_meaning(message):
    questions = user_data[message.chat.id]['kanji']['questions']
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

    if not questions:
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(telebot.types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –∫–∞–Ω–¥–∑–∏!', reply_markup=keyboard)
        back_to_start(message)
        return

    current_question = random.choice(questions)
    user_data[message.chat.id]['kanji']['current'] = current_question
    user_data[message.chat.id]['kanji']['questions'].remove(current_question)

    options = [current_question]
    for _ in range(3):
        option = random.choice(list(noryoku_translate.keys()))
        while option in options:
            option = random.choice(list(noryoku_translate.keys()))
        options.append(option)
    random.shuffle(options)

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        meaning_option = noryoku_translate[option]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–Ω–¥–∑–∏ –≤ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        keyboard.add(telebot.types.KeyboardButton(meaning_option))
    keyboard.add(telebot.types.KeyboardButton('–ù–∞–∑–∞–¥'))
    bot.send_message(message.chat.id, f"{current_question} ‚Äì —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç –∫–∞–Ω–¥–∑–∏?", reply_markup=keyboard)



@bot.message_handler(func=lambda message: message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def main_menu(message):
    back_to_start(message)


while True:
    try:
        bot.polling(non_stop=True, timeout=160, long_polling_timeout=160)
    except Exception as e:
        print(f"Error occurred: {e}")
        time.sleep(5)

